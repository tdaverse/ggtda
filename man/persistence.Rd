% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/persistence.r
\name{persistence}
\alias{persistence}
\alias{stat_persistence}
\alias{stat_frontier}
\alias{geom_fundamental_box}
\title{Persistence diagrams}
\usage{
stat_persistence(
  mapping = NULL,
  data = NULL,
  geom = "point",
  position = "identity",
  diagram = "diagonal",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)

stat_frontier(
  mapping = NULL,
  data = NULL,
  geom = "line",
  position = "identity",
  diagram = "diagonal",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)

geom_fundamental_box(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  diagram = "diagonal",
  t = NULL,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{geom}{The geometric object to use display the data; defaults to
\code{segment} in \code{geom_vietoris1()} and to \code{polygon} in \code{geom_vietoris2}. Pass
a string to override the default.}

\item{position}{Position adjustment, either as a string naming the adjustment
(e.g. \code{"jitter"} to use \code{position_jitter}), or the result of a call to a
position adjustment function. Use the latter if you need to change the
settings of the adjustment.}

\item{diagram}{One of \code{"flat"}, \code{"diagonal"}, or \code{"landscape"}; the
orientation for the diagram should take.}

\item{na.rm}{Logical: if \code{FALSE}, the default, \code{NA} lodes are not included;
if \code{TRUE}, \code{NA} lodes constitute a separate category, plotted in grey
(regardless of the color scheme).}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{...}{Additional arguments passed to \code{\link[ggplot2:layer]{ggplot2::layer()}}.}

\item{stat}{The statistical transformation to use on the data for this
layer, either as a \code{ggproto} \code{Geom} subclass or as a string naming the
stat stripped of the \code{stat_} prefix (e.g. \code{"count"} rather than
\code{"stat_count"})}

\item{t}{A numeric vector of time points at which to place fundamental boxes.}
}
\description{
Visualize persistence data in a (flat, diagonal, or landscape)
persistence diagram.
}
\details{
\emph{Persistence diagrams} are
\href{https://ggplot2.tidyverse.org/reference/geom_point.html}{scatterplots} of
persistence data. \emph{Persistence landscapes} can be understood as rotated
diagonal persistence diagrams.
}
\section{Persistence data}{


\emph{Persistence data} encode the values of an underlying parameter
\eqn{\epsilon} at which topological features appear ("birth") and disappear
("death"). The difference between the birth and the death of a feature is
called its \emph{persistence}. Whereas topological features may be of different
dimensions, persistence data sets usually also include the dimension of
each feature.

\strong{ggtda} expects persistence data to have at least three columns: birth,
death, and dimension.
}

\section{Persistence diagrams}{

Persistence diagrams recognize extended persistence data, with negative
birth/death values arising from the relative part of the filtration.

The original persistence diagrams plotted persistence against birth in what
we call "flat" diagrams, but most plot death against birth in "diagonal"
diagrams, often with a diagonal line indicating zero persistence.

The \code{geom_fundamental_box()} layer renders fundamental boxes at specified
time points (Chung & Lawson, 2020).
}

\section{Persistence landscapes}{

Persistence landscapes, anticipated by some alternative coordinatizations
of persistence diagrams, were proposed as Lipschitz functions that
demarcate the Pareto frontiers of persistence diagrams. They can be
averaged over the diagrams obtained from multiple data sets designed or
hypothesized to have been generated from the same underlying topological
structure.

Persistence landscapes do not currently recognize extended persistence
data.
}

\examples{
#####EXAMPLE 1#####

# toy example
toy.data <- data.frame(
  birth = c(0, 0, 1, 2, 1.5),
  death = c(5, 3, 5, 3, 6),
  dim = c("0", "0", "2", "1", "1")
)
# diagonal persistence diagram, coding persistence to transparency
ggplot(toy.data,
       aes(start = birth, end = death, colour = dim, shape = dim)) +
  theme_persist() +
  coord_equal() +
  stat_persistence(aes(alpha = after_stat(persistence)),
                   diagram = "diagonal", size = 3) +
  geom_abline(intercept = 0, slope = 1) +
  lims(x = c(0, 6), y = c(0, 6)) +
  guides(alpha = FALSE)
# diagonal persistence diagram with fundamental boxes
ggplot(toy.data,
       aes(start = birth, end = death, colour = dim, shape = dim)) +
  theme_persist() +
  coord_equal() +
  stat_persistence() +
  geom_abline(intercept = 0, slope = 1) +
  geom_fundamental_box(t = c(1.5, 5.5),
                       color = "goldenrod", fill = "goldenrod") +
  lims(x = c(0, 6), y = c(0, 6))
# diagonal persistence diagram with frontier
ggplot(toy.data,
       aes(start = birth, end = death, colour = dim, shape = dim)) +
  theme_persist() +
  coord_equal() +
  stat_persistence() +
  stat_frontier() +
  lims(x = c(0, NA), y = c(0, NA))
# flat persistence diagram, coding dimension to numeral
ggplot(toy.data,
       aes(start = birth, end = death, label = dim)) +
  theme_persist() +
  stat_persistence(diagram = "flat", geom = "text") +
  lims(x = c(0, NA), y = c(0, NA))
# landscape persistence frontier
ggplot(toy.data,
       aes(start = birth, end = death, colour = dim, shape = dim)) +
  theme_persist() +
  coord_equal() +
  stat_frontier(diagram = "landscape") +
  lims(x = c(0, NA), y = c(0, NA))

#####EXAMPLE 2#####
# load library and generate dataset for comprehensive example
library("ripserr")
# noisy unit circle (Betti-1 number = 1)
n <- 100L; sd <- 0.1
set.seed(7)
t <- stats::runif(n = n, min = 0, max = 2*pi)
annulus.df <- data.frame(
  x = cos(t) + stats::rnorm(n = n, mean = 0, sd = sd),
  y = sin(t) + stats::rnorm(n = n, mean = 0, sd = sd)
)
# calculate persistence homology and format
annulus.phom <- as.data.frame(vietoris_rips(annulus.df))
annulus.phom$dimension <- as.factor(annulus.phom$dimension)
# pretty flat persistence diagram
ggplot(annulus.phom, aes(start = birth, end = death,
                         shape = dimension, colour = dimension)) +
  stat_persistence(diagram = "flat") +
  theme_persist()
# pretty diagonal persistence diagram
ggplot(annulus.phom, aes(start = birth, end = death,
                         shape = dimension, colour = dimension)) +
  stat_persistence(diagram = "diagonal") +
  theme_persist()
# pretty landscape persistence diagram
ggplot(annulus.phom, aes(start = birth, end = death,
                         shape = dimension, colour = dimension)) +
  stat_frontier(diagram = "landscape") +
  theme_persist()
}
\references{
H Edelsbrunner, D Letscher, and A Zomorodian (2000) Topological persistence
and simplification. \emph{Proceedings 41st Annual Symposium on Foundations of
Computer Science}, 454--463. \doi{10.1109/SFCS.2000.892133}

H Edelsbrunner and D Morozov (2012) Persistent Homology: Theory and Practice.
\emph{European Congress of Mathematics}, 31--50. \doi{10.4171/120}

P Bubenik (2015) Statistical Topological Data Analysis using Persistence
Landscapes. \emph{Journal of Machine Learning Research}, \strong{16} 77--102.
\url{http://jmlr.org/papers/v16/bubenik15a.html}

F Chazal and B Michel (2017) An introduction to Topological Data Analysis:
fundamental and practical aspects for data scientists.
\url{https://arxiv.org/abs/1710.04019}

Y-M Chung and A Lawson (2020) Persistence Curves: A Canonical Framework for
Summarizing Persistence Diagrams. \url{https://arxiv.org/abs/1904.07768}
}
\seealso{
\code{\link[ggplot2:layer]{ggplot2::layer()}} for additional arguments.

Other plot layers for persistence data: 
\code{\link{barcode}}
}
\concept{plot layers for persistence data}
