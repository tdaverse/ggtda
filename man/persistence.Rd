% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/persistence.R, R/landscape.R, R/barcode.R,
%   R/fundamental-box.R
\name{stat_persistence}
\alias{stat_persistence}
\alias{geom_persistence}
\alias{geom_landscape}
\alias{geom_barcode}
\alias{geom_fundamental_box}
\alias{persistence}
\title{Persistence homologies}
\usage{
stat_persistence(
  mapping = NULL,
  data = NULL,
  geom = "persistence",
  position = "identity",
  filtration = "Rips",
  diameter_max = NULL,
  radius_max = NULL,
  max_hom_degree = 1L,
  field_order = 2L,
  engine = NULL,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)

geom_persistence(
  mapping = NULL,
  data = NULL,
  stat = "persistence",
  position = "identity",
  diagram = "diagonal",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)

geom_landscape(
  mapping = NULL,
  data = NULL,
  stat = "persistence",
  n_levels = Inf,
  position = "identity",
  diagram = "landscape",
  lineend = "butt",
  linejoin = "round",
  linemitre = 10,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)

geom_barcode(
  mapping = NULL,
  data = NULL,
  stat = "persistence",
  position = "identity",
  order_by = c("persistence", "start"),
  decreasing = FALSE,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)

geom_fundamental_box(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  diagram = "diagonal",
  t = NULL,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{geom}{The geometric object to use to display the data for this layer.
When using a \verb{stat_*()} function to construct a layer, the \code{geom} argument
can be used to override the default coupling between stats and geoms. The
\code{geom} argument accepts the following:
\itemize{
\item A \code{Geom} ggproto subclass, for example \code{GeomPoint}.
\item A string naming the geom. To give the geom as a string, strip the
function name of the \code{geom_} prefix. For example, to use \code{geom_point()},
give the geom as \code{"point"}.
\item For more information and other ways to specify the geom, see the
\link[ggplot2:layer_geoms]{layer geom} documentation.
}}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{filtration}{The type of filtration from which to compute persistent
homology; one of \code{"Rips"}, \code{"Vietoris"} (equivalent) or \code{"alpha"}.}

\item{diameter_max, radius_max}{Maximum diameter or radius for the simplicial
filtration. Both default to \code{NULL}, in which case the complete filtration
is constructed.}

\item{max_hom_degree}{Maximum dimension of the simplicial filtration,
the highest-dimensional features to be calculated.}

\item{field_order}{(Prime) order of the field over which to compute
persistent homology.}

\item{engine}{The computational engine to use (see 'Details'). Reasonable
defaults are chosen based on \code{filtration}.}

\item{na.rm}{Logical: if \code{FALSE}, the default, \code{NA} lodes are not included;
if \code{TRUE}, \code{NA} lodes constitute a separate category, plotted in grey
(regardless of the color scheme).}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{...}{Additional arguments passed to \code{\link[ggplot2:layer]{ggplot2::layer()}}.}

\item{stat}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used the override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
\itemize{
\item A \code{Stat} ggproto subclass, for example \code{StatCount}.
\item A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use \code{stat_count()},
give the stat as \code{"count"}.
\item For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.
}}

\item{diagram}{One of \code{"flat"}, \code{"diagonal"}, or \code{"landscape"}; the
orientation for the diagram should take.}

\item{n_levels}{The number of levels to compute and plot. If \code{Inf} (the
default), determined to be all levels.}

\item{lineend}{Line end style (round, butt, square).}

\item{linejoin}{Line join style (round, mitre, bevel).}

\item{linemitre}{Line mitre limit (number greater than 1).}

\item{order_by}{A character vector comprised of (\code{"start"}, \code{"end"},
\code{"part"}, and/or \code{"persistence"}) by which the features should be ordered
(within \code{group}); defaults to \code{c("persistence", "start")}.}

\item{decreasing}{Logical; whether to sort features by decreasing values of
\code{order_by} (again, within \code{group}).}

\item{t}{A numeric vector of time points at which to place fundamental boxes.}
}
\description{
Compute persistence homologies with \code{stat_persistence()} and
plot different visual representations with
persistence diagrams, persistence landscapes, and barcode diagrams
using \code{geom_persistence()}, \code{geom_landscape()}, and \code{geom_barcode()}, respectively.

Briefly, these representations can be understood as follows:
\itemize{

\item{\strong{Persistence diagrams}}{
are \href{https://ggplot2.tidyverse.org/reference/geom_point.html}{scatterplots} of
persistence data.
}

\item{\strong{Persistence landscapes}}{
TODO
}

\item{\strong{Barcode diagrams}}{
are \href{https://ggplot2.tidyverse.org/reference/geom_linerange.html}{vertical interval plots} of
persistence data.
}

}

For a more thorough treatment of these representations,
refer to the \strong{Details} section below and
\code{vignette("visualize-persistence", package = "ggtda")}.
}
\details{
Here we provide clarification on the two ways these functions accept data
(via the \code{dataset} aesthetic with \code{stat_persistence()} and the
\code{start} and \code{end} aesthetics in with \code{stat_identity()}).
We also provide basic theoretical treatments of the methods for visualizing
persistent homologies.
\subsection{Point cloud data:}{

TODO - Speak to types of data \code{dataset} aesthetic accepts, preempting
discussion of "persistence data".

TODO - Include minor details on how \strong{ggtda} accepts point cloud data
(list column with matrix, dataframe, etc).
Direct to \code{vignette("grouped-list-data", package = "ggtda")}.
}

\subsection{Persistence data:}{

\emph{Persistence data} encode the values of an underlying parameter
\eqn{\epsilon} at which topological features appear ("birth") and disappear
("death"). The difference between the birth and the death of a feature is
called its \emph{persistence}. As topological features may be of different
dimensions, persistence data sets usually also include the dimension of
each feature.

Persistence data can be provided to \code{geom_persistence()}, \code{geom_landscape()},
and \code{geom_landscape()} by specifying \code{stat = "identity"} and mapping the
\code{start} and \code{end} aesthetics to the "birth" and "death" values in the layer data.
It is standard to also map aesthetics such as \code{color} or \code{linetype} to
features' "dimension" values in the layer data.
}

\subsection{Persistence diagrams:}{

Persistence diagrams recognize extended persistence data, with negative
birth/death values arising from the relative part of the filtration.

The original persistence diagrams plotted persistence against birth in what
we call "flat" diagrams, but most plot death against birth in "diagonal"
diagrams, often with a diagonal line indicating zero persistence.
In \code{geom_persistence()}, these alternatives can be specified with
the \code{diagram} parameter.

The \code{geom_fundamental_box()} layer renders fundamental boxes at specified
time points (Chung & Lawson, 2020).
}

\subsection{Persistence landscapes:}{

Persistence landscapes, anticipated by some alternative coordinatizations
of persistence diagrams, were proposed as Lipschitz functions that demarcate
the Pareto frontiers of persistence diagrams. They can be averaged over the
diagrams obtained from multiple data sets designed or hypothesized to have
been generated from the same underlying topological structure.

Note: \code{geom_persistence()} does not currently recognize extended persistence data.
}

\subsection{Barcode diagrams:}{

Barcode diagrams traditionally extend along the horizontal axis and are arranged
vertically in order of group (e.g. dimension) and birth. They may also be
transposed and juxtaposed with persistence diagrams. While
topological features of different dimensions are usually plotted together
in persistence diagrams, barcode diagrams often separate segments corresponding to
features of different dimension, by vertical grouping or by faceting.
}
}
\section{Aesthetics}{

\code{stat_persistence()} understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{\code{dataset}}
\item \code{group}
}
\code{geom_persistence()} understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{\code{dataset} \emph{or} \code{start}}
\item \strong{\code{dataset} \emph{or} \code{end}}
\item \code{alpha}
\item \code{colour}
\item \code{fill}
\item \code{group}
\item \code{shape}
\item \code{size}
\item \code{stroke}
}
\code{geom_landscape()} understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{\code{dataset} \emph{or} \code{start}}
\item \strong{\code{dataset} \emph{or} \code{end}}
\item \code{alpha}
\item \code{colour}
\item \code{group}
\item \code{linetype}
\item \code{linewidth}
}
\code{geom_barcode()} understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{\code{dataset} \emph{or} \code{start}}
\item \strong{\code{dataset} \emph{or} \code{end}}
\item \code{alpha}
\item \code{colour}
\item \code{group}
\item \code{linetype}
\item \code{linewidth}
}
\code{geom_fundamental_box()} understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \code{alpha}
\item \code{colour}
\item \code{fill}
\item \code{group}
\item \code{linetype}
\item \code{linewidth}
}
Learn more about setting these aesthetics in \code{vignette("ggplot2-specs", package = "ggplot2")}.
}

\section{Computed variables}{

\code{stat_persistence} calculates the following variables that can be accessed with \link[ggplot2:aes_eval]{delayed evaluation}.
\itemize{
\item \code{after_stat(start)}\cr birth value of each feature (from 'dataset' aesthetic).
\item \code{after_stat(end)}\cr death value of each feature (from 'dataset' aesthetic).
\item \code{after_stat(dimension)}\cr integer feature dimension (from 'dataset' aesthetic).
\item \code{after_stat(group)}\cr interaction of existing 'group', dataset ID, and 'dimension'.
\item \code{after_stat(part)}\cr whether features belong to ordinary, relative, or extended homology.
\item \code{after_stat(persistence)}\cr differences between birth and death values of features.
}
}

\examples{

# toy example
toy.data <- data.frame(
  birth = c(0, 0, 1, 2, 1.5),
  death = c(5, 3, 5, 3, 6),
  dim = c("0", "0", "2", "1", "1")
)
# diagonal persistence diagram, coding persistence to transparency
ggplot(toy.data,
       aes(start = birth, end = death, colour = dim, shape = dim)) +
  theme_persist() +
  coord_equal() +
  stat_persistence(aes(alpha = after_stat(persistence)),
                   diagram = "diagonal", size = 3) +
  geom_abline(intercept = 0, slope = 1) +
  lims(x = c(0, 6), y = c(0, 6)) +
  guides(alpha = "none")
# diagonal persistence diagram with fundamental boxes
ggplot(toy.data,
       aes(start = birth, end = death, colour = dim, shape = dim)) +
  theme_persist() +
  coord_equal() +
  stat_persistence() +
  geom_abline(intercept = 0, slope = 1) +
  geom_fundamental_box(t = c(1.5, 5.5),
                       color = "goldenrod", fill = "goldenrod") +
  lims(x = c(0, 6), y = c(0, 6)) +
  guides(alpha = "none")
# flat persistence diagram, coding dimension to numeral
ggplot(toy.data,
       aes(start = birth, end = death, label = dim)) +
  theme_persist() +
  stat_persistence(diagram = "flat", geom = "text") +
  lims(x = c(0, NA), y = c(0, NA))
# flat persistence diagram, labeling by feature ID
ggplot(toy.data, aes(start = birth, end = death, colour = dim, shape = dim)) +
  theme_persist() +
  coord_equal() +
  stat_persistence(
    geom = "text",
    aes(label = after_stat(id), alpha = after_stat(persistence)),
    diagram = "flat", size = 3
  ) +
  guides(alpha = "none")
# toy example
toy.data <- data.frame(
  birth = c(0, 0, 1, 3, 4, 1.5),
  death = c(5, 3, 5, 4, 6, 3),
  dim = factor(c(0, 0, 1, 1, 2, 2))
)
# persistence diagram with landscape overlaid
ggplot(toy.data,
       aes(start = birth, end = death, colour = dim, shape = dim)) +
  theme_persist() +
  coord_equal() +
  stat_persistence() +
  stat_landscape(aes(alpha = -after_stat(level)), diagram = "diagonal") +
  lims(x = c(0, 8), y = c(0, NA)) +
  guides(alpha = "none")
# persistence landscape with diagram overlaid
ggplot(toy.data,
       aes(start = birth, end = death, colour = dim, shape = dim)) +
  theme_persist() +
  coord_equal() +
  stat_landscape(aes(linetype = after_stat(factor(level)))) +
  stat_persistence(diagram = "landscape") +
  lims(x = c(0, 8), y = c(0, NA)) +
  labs(linetype = "level")

# load library and generate dataset for comprehensive example
library("ripserr")
# noisy unit circle (Betti-1 number = 1)
n <- 100L; sd <- 0.1
set.seed(7)
t <- stats::runif(n = n, min = 0, max = 2*pi)
annulus.df <- data.frame(
  x = cos(t) + stats::rnorm(n = n, mean = 0, sd = sd),
  y = sin(t) + stats::rnorm(n = n, mean = 0, sd = sd)
)
# calculate persistence homology and format
annulus.phom <- as.data.frame(vietoris_rips(annulus.df))
annulus.phom$dimension <- as.factor(annulus.phom$dimension)
# pretty diagonal persistence diagram
ggplot(annulus.phom, aes(start = birth, end = death,
                         shape = dimension, colour = dimension)) +
  stat_persistence(diagram = "landscape") +
  theme_persist()
# pretty landscape persistence diagram
ggplot(annulus.phom, aes(start = birth, end = death,
                         shape = dimension, colour = dimension)) +
  stat_landscape(diagram = "landscape") +
  theme_persist()

# toy example
toy.data <- data.frame(
  appear = c(0, 0, 0, 1, 2),
  disappear = c(5, 3, 3, 5, 3),
  dim = c("0", "0", "0", "2", "1")
)
# topological barcode using the geom layer (and minimalist theme)
ggplot(toy.data,
       aes(start = appear, end = disappear, colour = dim, shape = dim)) +
  geom_barcode() +
  theme_barcode()

# load library and dataset for comprehensive example
library("ripserr")
angles <- runif(100, 0, 2 * pi)
circle2d <- cbind(cos(angles), sin(angles)) # unit circle (Betti-1 number = 1)
# calculate persistence homology and format
circ.phom <- as.data.frame(vietoris_rips(circle2d))
circ.phom$dimension <- as.factor(circ.phom$dimension)
# pretty topological barcode with geom layer
ggplot(circ.phom, aes(start = birth, end = death,
                      colour = dimension)) +
  geom_barcode() +
  theme_barcode()

# toy example
toy.data <- data.frame(
  appear = c(0, 0, 0, 1, 2),
  disappear = c(5, 3, 3, 5, 3),
  dim = c("0", "0", "0", "2", "1")
)
# topological barcode using the geom layer (and minimalist theme)
ggplot(toy.data,
       aes(start = appear, end = disappear, colour = dim, shape = dim)) +
  geom_barcode() +
  theme_barcode()

# load library and dataset for comprehensive example
library("ripserr")
angles <- runif(100, 0, 2 * pi)
circle2d <- cbind(cos(angles), sin(angles)) # unit circle (Betti-1 number = 1)
# calculate persistence homology and format
circ.phom <- as.data.frame(vietoris_rips(circle2d))
circ.phom$dimension <- as.factor(circ.phom$dimension)
# pretty topological barcode with geom layer
ggplot(circ.phom, aes(start = birth, end = death,
                      colour = dimension)) +
  geom_barcode() +
  theme_barcode()

# toy extended persistence data, adapted from Carriere & Oudot (2015)
eph.data <- data.frame(
  dimension = c(0L, 1L, 0L, 1L),
  birth = c(1, -9, 1, 8),
  death = c(5, -7, -11, -3)
)
# extended persistence diagram
ggplot(eph.data,
       aes(start = birth, end = death, color = factor(dimension))) +
  theme_persist() +
  coord_equal() +
  stat_persistence(aes(shape = after_stat(part)), size = 3) +
  geom_abline(intercept = 0, slope = 1) +
  lims(x = c(0, 11), y = c(0, 11)) +
  labs(color = "Dimension", shape = "Homology")
# extended barcode
ggplot(eph.data,
       aes(start = birth, end = death, color = factor(dimension))) +
  theme_barcode() +
  geom_barcode(aes(linetype = after_stat(part)))

# list-column of data sets to 'dataset' aesthetic
raw_data <- data.frame(obj = I(list(eurodist, 10*swiss, Nile)))
raw_data$class <- vapply(raw_data$obj, class, "")

if ("TDA" \%in\% rownames(utils::installed.packages())) {
  
  # barcodes
  ggplot(raw_data, aes(dataset = obj)) +
    geom_barcode(aes(color = factor(after_stat(dimension))),
                 engine = "TDA") +
    facet_wrap(facets = vars(class))
  # persistence diagram
  ggplot(raw_data, aes(dataset = obj)) +
    stat_persistence(aes(color = factor(after_stat(dimension)), shape = class),
                     engine = "GUDHI")
  # persistence landscape
  ggplot(raw_data, aes(dataset = obj)) +
    facet_wrap(facets = vars(class), scales = "free") +
    stat_landscape(aes(color = factor(after_stat(dimension))),
                   engine = "Dionysus") +
    theme(legend.position = "bottom")
  
}

if ("ripserr" \%in\% rownames(utils::installed.packages())) {
  
  # exclude time series data if {ripserr} v0.1.1 is installed
  if (utils::packageVersion("ripserr") == "0.1.1")
    raw_data <- raw_data[c(1L, 2L), ]
  # barcodes
  ggplot(raw_data, aes(dataset = obj)) +
    geom_barcode(aes(color = factor(after_stat(dimension))),
                 engine = "ripserr") +
    facet_wrap(facets = vars(class))
  # persistence diagram
  ggplot(raw_data, aes(dataset = obj)) +
    stat_persistence(aes(color = factor(after_stat(dimension)), shape = class),
                     engine = "ripserr")
  # persistence landscape
  ggplot(raw_data, aes(dataset = obj)) +
    facet_wrap(facets = vars(class), scales = "free") +
    stat_landscape(aes(color = factor(after_stat(dimension))),
                   engine = "ripserr") +
    theme(legend.position = "bottom")
  
}
}
\references{
H Edelsbrunner, D Letscher, and A Zomorodian (2000) Topological persistence
and simplification. \emph{Proceedings 41st Annual Symposium on Foundations of
Computer Science}, 454--463. \doi{10.1109/SFCS.2000.892133}

H Edelsbrunner and D Morozov (2012) Persistent Homology: Theory and Practice.
\emph{European Congress of Mathematics}, 31--50. \doi{10.4171/120}

Y-M Chung and A Lawson (2020) Persistence Curves: A Canonical Framework for
Summarizing Persistence Diagrams. \url{https://arxiv.org/abs/1904.07768}

P Bubenik (2015) Statistical Topological Data Analysis using Persistence
Landscapes. \emph{Journal of Machine Learning Research}, \strong{16} 77--102.
\url{http://jmlr.org/papers/v16/bubenik15a.html}

F Chazal and B Michel (2017) An introduction to Topological Data Analysis:
fundamental and practical aspects for data scientists.
\url{https://arxiv.org/abs/1710.04019}

G Carlsson, A Zomorodian, A Collins, and L Guibas (2004) Persistence barcodes
for shapes. \emph{Proceedings of the 2004 Eurographics/ACM SIGGRAPH symposium on
Geometry processing}, 124--135. \doi{10.1145/1057432.1057449}

G Carlsson (2014) Topological pattern recognition for point cloud data. \emph{Acta
Numerica} \strong{23}, 289--368. \doi{10.1017/S0962492914000051}

F Chazal and B Michel (2017) An introduction to Topological Data Analysis:
fundamental and practical aspects for data scientists.
\url{https://arxiv.org/abs/1710.04019}
}
\seealso{
\code{\link[ggplot2:layer]{ggplot2::layer()}} for additional arguments.
}
\concept{plot layers for persistence data}
