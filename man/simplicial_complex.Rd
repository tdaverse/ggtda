% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simplicial-complex.R
\name{simplicial_complex}
\alias{simplicial_complex}
\alias{stat_simplicial_complex}
\alias{geom_simplicial_complex}
\title{Simplicial complexes from 2-D point clouds}
\usage{
stat_simplicial_complex(
  mapping = NULL,
  data = NULL,
  geom = "SimplicialComplex",
  position = "identity",
  radius = NULL,
  diameter = NULL,
  zero_simplices = "all",
  one_simplices = "maximal",
  max_dimension = 2L,
  complex = "Rips",
  engine = NULL,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)

geom_simplicial_complex(
  mapping = NULL,
  data = NULL,
  stat = "SimplicialComplex",
  position = "identity",
  outlines = TRUE,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{geom}{The geometric object to use to display the data, either as a
\code{ggproto} \code{Geom} subclass or as a string naming the geom stripped of the
\code{geom_} prefix (e.g. \code{"point"} rather than \code{"geom_point"})}

\item{position}{Position adjustment, either as a string naming the adjustment
(e.g. \code{"jitter"} to use \code{position_jitter}), or the result of a call to a
position adjustment function. Use the latter if you need to change the
settings of the adjustment.}

\item{radius, diameter}{The (positive) radius or diameter used in the
construction. Provide only one of these; if neither is provided, they
default to zero.}

\item{zero_simplices}{Which 0-simplices (vertices) to plot; one of \code{"none"},
\code{"maximal"}, and \code{"all"} (default).}

\item{one_simplices}{Which 1-simplices (edges) to plot; one of \code{"none"},
\code{"maximal"} (default), and \code{"all"}.}

\item{max_dimension}{Compute simplices of dimension up to \code{max_dimension}
(only relevant for the Vietoris--Rips complex computed with the
\code{simplextree} engine).}

\item{complex}{The type of complex to compute, either \code{"Vietoris"}, \code{"Rips"},
\code{"Cech"}, or \code{"alpha"}.}

\item{engine}{The computational engine to use (see 'Details'). Reasonable
defaults are chosen based on \code{complex}.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{stat}{The statistical transformation to use on the data for this
layer, either as a \code{ggproto} \code{Geom} subclass or as a string naming the
stat stripped of the \code{stat_} prefix (e.g. \code{"count"} rather than
\code{"stat_count"})}

\item{outlines}{Should the outlines of polygons representing high-dimensional
simplices be drawn?}
}
\description{
Construct and plot simplicial complexes that equal or
approximate the topology of a ball cover of a set of points.
}
\details{
Persistent homology is ultimately based on the topological properties of
regions containing a set of points. When the region is the union of balls of
a common radius, its homology is equal to or approximated by that of several
families of \emph{simplicial complexes} constructed on the point set. The
simplicial complex stat constructs these simplicial complexes for a set of
points in \eqn{xy}-space while the geom plots them on the same coordinates as
the points.
}
\section{Complexes}{

A \emph{Vietoris--Rips complex} of a point cloud is the simplicial complex
consisting of a simplex for each subset of points within a fixed diameter
of each other. A \emph{Čech complex} contains the simplex for each subset that
lies within a circle of fixed diameter. (This means that the Čech complex
depends on the geometry of the ambient space containing the point cloud,
while the Vietoris complex depends only on the inter-point distances.
Moreover, a Vietoris complex contains the Čech complex of the same
diameter.) An \emph{alpha complex} comprises those simplices of the Delaunay
triangulation within a fixed diameter.

{\strong{ggtda}} relies on four engines to compute simplicial complexes, which
can be specified to the \code{engine} parameter: Vietoris--Rips and Čech
complexes of dimension at most 2 are implemented in base R (\code{"base"}),
which is slow but allows the package to stand alone for small cases.
\code{\link[RTriangle:triangulate]{RTriangle::triangulate()}} is used to compute the Delaunay triangulation
for alpha complexes (\code{"RTriangle"}), without inserting Steiner points (so
that the vertices of the triangulation are among those of the data). The
package \strong{TDA} can compute \link[TDA:ripsFiltration]{Vietoris--Rips filtrations} and \link[TDA:alphaComplexFiltration]{alpha filtrations} (\code{"TDA"} for default engines,
or specify the \code{"GUDHI"} or \code{"Dionysus"} engine). Finally, the highly
optimized package
\strong{\link[simplextree:simplextree-package]{simplextree}} can be called
to compute Vietoris--Rips complexes (\code{"simplextree"}). As other complexes
are implemented in {\strong{simplextree}}, they will be made available here.
}

\section{Aesthetics}{

\code{stat_simplicial_complex()} understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{\code{x}}
\item \strong{\code{y}}
\item \code{alpha}
\item \code{group}
}
\code{geom_simplicial_complex()} understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{\code{x}}
\item \strong{\code{y}}
\item \strong{\code{id}}
\item \strong{\code{dim}}
\item \code{alpha}
\item \code{colour}
\item \code{fill}
\item \code{group}
\item \code{linetype}
\item \code{linewidth}
\item \code{shape}
\item \code{size}
\item \code{stroke}
}
Learn more about setting these aesthetics in \code{vignette("ggplot2-specs", package = "ggplot2")}.
}

\section{Computed variables}{

\code{stat_simplicial_complex} calculates the following variables that can be accessed with \link[ggplot2:aes_eval]{delayed evaluation}.
\itemize{
\item \code{after_stat(dim)}\cr dimension of the corresponding simplex.
\item \code{after_stat(id)}\cr simplex identifier within each \code{dim}.
\item \code{after_stat(face)}\cr encoding of \code{dim} for high-dimensional simplices (\code{dim >= 2L}).
}
}

\examples{

# equilateral triangle
equilateral_triangle <- 
  data.frame(x = cos(2*pi*c(0,1/3,2/3)), y = sin(2*pi*c(0,1/3,2/3)))
# small perturbations from key values
eps <- .00000001

# Vietoris-Rips
ggplot(equilateral_triangle, aes(x, y)) +
  coord_fixed() +
  geom_simplicial_complex(diameter = sqrt(3) - eps)
ggplot(equilateral_triangle, aes(x, y)) +
  coord_fixed() +
  geom_simplicial_complex(diameter = sqrt(3) + eps)

# Čech
ggplot(equilateral_triangle, aes(x, y)) +
  coord_fixed() +
  geom_simplicial_complex(complex = "Cech", diameter = sqrt(3) - eps)
ggplot(equilateral_triangle, aes(x, y)) +
  coord_fixed() +
  geom_simplicial_complex(complex = "Cech", diameter = sqrt(3) + eps)

# alpha
ggplot(equilateral_triangle, aes(x, y)) +
  coord_fixed() +
  geom_simplicial_complex(complex = "alpha", diameter = sqrt(3) - eps)
ggplot(equilateral_triangle, aes(x, y)) +
  coord_fixed() +
  geom_simplicial_complex(complex = "alpha", diameter = sqrt(3) + eps)

set.seed(1)
s <- seq(0, 2*pi, length.out = 40)
df <- data.frame(
  x = cos(s) + rnorm(40, 0, .1),
  y = sin(s) + rnorm(40, 0, .1)
)

# default, visualizing dim w/ alpha:
ggplot(df, aes(x, y)) +
  coord_fixed() +
  geom_simplicial_complex(radius = .4)
# visualizing dim w/ fill:
ggplot(df, aes(x, y)) +
  coord_fixed() +
  geom_simplicial_complex(
    mapping = aes(fill = after_stat(dim)),
    alpha = .5, radius = .4
  )

# with a zero radius or diameter
ggplot(df, aes(x = x, y = y)) +
  coord_fixed() +
  stat_simplicial_complex(radius = 0)
# with a too-small radius or diameter
ggplot(df, aes(x = x, y = y)) +
  coord_fixed() +
  stat_simplicial_complex(radius = 0.01)

# Visualizing multiple groups together
s <- c(s, s)
df_mix <- data.frame(
  x = cos(s) + rnorm(80, 0, .1),
  y = sin(s) + rnorm(80, 0, .1)
)
df_mix$x <- df_mix$x + rep(c(-2, 2), length.out = 80)
df_mix$lab <- rep(c("a", "b"), length.out = 80)

ggplot(df_mix, aes(x, y, fill = lab)) +
  geom_simplicial_complex(radius = .4)

# generate a noisy 2D circle
set.seed(2)
theta <- stats::runif(n = 40L, min = 0, max = 2*pi)
d <- data.frame(x = cos(theta) + stats::rnorm(40L, 0, .15),
                y = sin(theta) + stats::rnorm(40L, 0, .15))
r <- 1/3

# overlay ball cover and Vietoris-Rips complex with points
ggplot(d, aes(x = x, y = y)) +
  theme_bw() +
  coord_fixed() +
  geom_disk(radius = r, fill = "aquamarine3") +
  geom_simplicial_complex(
    radius = r, fill = "darkgoldenrod",
    complex = "Vietoris", engine = "base"
  ) +
  geom_point()
# use the Čech complex instead
ggplot(d, aes(x = x, y = y)) +
  theme_bw() +
  coord_fixed() +
  geom_disk(radius = r, fill = "aquamarine3") +
  geom_simplicial_complex(
    radius = r, fill = "darkgoldenrod",
    complex = "Cech", engine = "base"
  ) +
  geom_point()
}
\seealso{
\code{\link[ggplot2:layer]{ggplot2::layer()}} for additional arguments.

Other plot layers for point clouds: 
\code{\link{disk}}
}
\concept{plot layers for point clouds}
