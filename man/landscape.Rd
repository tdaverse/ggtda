% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/landscape.R
\name{landscape}
\alias{landscape}
\alias{stat_landscape}
\alias{geom_landscape}
\title{Persistence landscapes}
\usage{
stat_landscape(
  mapping = NULL,
  data = NULL,
  geom = "landscape",
  position = "identity",
  diagram = "landscape",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)

geom_landscape(
  mapping = NULL,
  data = NULL,
  stat = "landscape",
  position = "identity",
  lineend = "butt",
  linejoin = "round",
  linemitre = 10,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{geom}{The geometric object to use to display the data, either as a
\code{ggproto} \code{Geom} subclass or as a string naming the geom stripped of the
\code{geom_} prefix (e.g. \code{"point"} rather than \code{"geom_point"})}

\item{position}{Position adjustment, either as a string naming the adjustment
(e.g. \code{"jitter"} to use \code{position_jitter}), or the result of a call to a
position adjustment function. Use the latter if you need to change the
settings of the adjustment.}

\item{diagram}{One of \code{"flat"}, \code{"diagonal"}, or \code{"landscape"}; the
orientation for the diagram should take.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{colour = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{stat}{The statistical transformation to use on the data for this
layer, either as a \code{ggproto} \code{Geom} subclass or as a string naming the
stat stripped of the \code{stat_} prefix (e.g. \code{"count"} rather than
\code{"stat_count"})}

\item{lineend}{Line end style (round, butt, square).}

\item{linejoin}{Line join style (round, mitre, bevel).}

\item{linemitre}{Line mitre limit (number greater than 1).}
}
\description{
Visualize persistence data as a persistence landscape.
}
\details{
{\emph{Persistence landscapes}}, anticipated by some alternative coordinatizations
of persistence diagrams, were proposed as Lipschitz functions that demarcate
the Pareto frontiers of persistence diagrams. They can be averaged over the
diagrams obtained from multiple data sets designed or hypothesized to have
been generated from the same underlying topological structure.

Persistence landscapes do not currently recognize extended persistence data.
}
\section{Aesthetics}{

\code{stat_landscape()} understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{\code{start} \emph{or} \code{dataset}}
\item \strong{\code{end} \emph{or} \code{dataset}}
\item \code{group}
}
\code{geom_landscape()} understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{\code{x}}
\item \strong{\code{y}}
\item \code{alpha}
\item \code{colour}
\item \code{group}
\item \code{linetype}
\item \code{linewidth}
}
\code{start} and \code{end} are dropped during the statistical transformation.

Learn more about setting these aesthetics in \code{vignette("ggplot2-specs", package = "ggplot2")}.
}

\section{Computed variables}{

\code{stat_landscape} calculates the following variables that can be accessed with \link[ggplot2:aes_eval]{delayed evaluation}.
\itemize{
\item \code{after_stat(x)}, \code{after_stat(y)}\cr coordinates of segment endpoints of each frontier.
\item \code{after_stat(dimension)}\cr feature dimension (with 'dataset' aesthetic only).
\item \code{after_stat(group)}\cr interaction of existing 'group', dataset ID, and 'dimension'.
\item \code{after_stat(level)}\cr position of each frontier, starting from the outermost.
\item \code{after_stat(slope)}\cr slope of the landscape abscissa.
}

Note that \code{start} and \code{end} are dropped during the statistical transformation.
}

\examples{
# toy example
toy.data <- data.frame(
  birth = c(0, 0, 1, 3, 4, 1.5),
  death = c(5, 3, 5, 4, 6, 3),
  dim = factor(c(0, 0, 1, 1, 2, 2))
)
# persistence diagram with landscape overlaid
ggplot(toy.data,
       aes(start = birth, end = death, colour = dim, shape = dim)) +
  theme_persist() +
  coord_equal() +
  stat_persistence() +
  stat_landscape(aes(alpha = -after_stat(level)), diagram = "diagonal") +
  lims(x = c(0, 8), y = c(0, NA)) +
  guides(alpha = "none")
# persistence landscape with diagram overlaid
ggplot(toy.data,
       aes(start = birth, end = death, colour = dim, shape = dim)) +
  theme_persist() +
  coord_equal() +
  stat_landscape(aes(linetype = after_stat(factor(level)))) +
  stat_persistence(diagram = "landscape") +
  lims(x = c(0, 8), y = c(0, NA)) +
  labs(linetype = "level")

# load library and generate dataset for comprehensive example
library("ripserr")
# noisy unit circle (Betti-1 number = 1)
n <- 100L; sd <- 0.1
set.seed(7)
t <- stats::runif(n = n, min = 0, max = 2*pi)
annulus.df <- data.frame(
  x = cos(t) + stats::rnorm(n = n, mean = 0, sd = sd),
  y = sin(t) + stats::rnorm(n = n, mean = 0, sd = sd)
)
# calculate persistence homology and format
annulus.phom <- as.data.frame(vietoris_rips(annulus.df))
annulus.phom$dimension <- as.factor(annulus.phom$dimension)
# pretty diagonal persistence diagram
ggplot(annulus.phom, aes(start = birth, end = death,
                         shape = dimension, colour = dimension)) +
  stat_persistence(diagram = "landscape") +
  theme_persist()
# pretty landscape persistence diagram
ggplot(annulus.phom, aes(start = birth, end = death,
                         shape = dimension, colour = dimension)) +
  stat_landscape(diagram = "landscape") +
  theme_persist()

if ("ripserr" \%in\% rownames(utils::installed.packages())) {

# list-column of data sets to 'dataset' aesthetic
raw_data <- data.frame(obj = I(list(eurodist, 10*swiss, Nile)))
raw_data$class <- vapply(raw_data$obj, class, "")
# exclude time series data if {ripserr} v0.1.1 is installed
if ("ripserr" \%in\% rownames(utils::installed.packages()) &&
    utils::packageVersion("ripserr") == "0.1.1")
  raw_data <- raw_data[c(1L, 2L), ]
# barcodes
# FIXME: Should barcodes stack within each facet?
ggplot(raw_data, aes(dataset = obj)) +
  geom_barcode(stat = "persistence",
               aes(color = factor(after_stat(dimension)), shape = class)) +
  facet_wrap(facets = vars(class))
# persistence diagram
ggplot(raw_data, aes(dataset = obj)) +
  stat_persistence(aes(color = factor(after_stat(dimension)), shape = class))
# persistence landscape
ggplot(raw_data, aes(dataset = obj)) +
  facet_wrap(facets = vars(class), scales = "free") +
  stat_landscape(aes(color = factor(after_stat(dimension)))) +
  theme(legend.position = "bottom")

}
}
\references{
P Bubenik (2015) Statistical Topological Data Analysis using Persistence
Landscapes. \emph{Journal of Machine Learning Research}, \strong{16} 77--102.
\url{http://jmlr.org/papers/v16/bubenik15a.html}

F Chazal and B Michel (2017) An introduction to Topological Data Analysis:
fundamental and practical aspects for data scientists.
\url{https://arxiv.org/abs/1710.04019}
}
\seealso{
\code{\link[ggplot2:layer]{ggplot2::layer()}} for additional arguments.

Other plot layers for persistence data: 
\code{\link{barcode}},
\code{\link{persistence}}
}
\concept{plot layers for persistence data}
